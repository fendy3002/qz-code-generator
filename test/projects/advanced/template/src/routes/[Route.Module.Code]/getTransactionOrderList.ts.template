import { errorHandler, filterParser } from "@fendy3002/express-helper";
import * as types from '../../types';

export default async (router, config: types.config.app, moduleInfo: types.moduleInfo) => {
    const validateSearch = (req) => {
        return {
            success: true
        };
    };
    const getSupplement = async (req, data) => {
        let supplement: any = {};
        {{ _helper.renderHelper("listsupplement.template", Model.Fields) | safe }}
        return supplement;
    };
    
    router.get("/transaction-order",
        errorHandler.handled(async (req, res, next) => {
            res.locals._title = req.moduleInfo.title;

            const changeRequestModel = req.mongoose.model("change_request");

            //pagination
            let page_limit = req.query.page_limit ? req.query.page_limit : 25;
            let page = req.query.page ? req.query.page : 1;
            let result = [];
            let totalData = 0;
            let modalData = null;

            //get data
            if (req.query.search) {
                let validateSearchResult = validateSearch(req);
                if (validateSearchResult.success) {
                    let filter = await filterParser.mongo(req.query, {
                        _id: "_id",
                        RecordId: "NextValue._id"
                    }, {
                        "validateKey": true
                    });
                    filter = {
                        ...filter,
                        ModuleCode: req.moduleInfo.code
                    };

                    totalData = await changeRequestModel.count(filter);
                    //get data
                    result = await changeRequestModel.find(filter)
                        .sort({ LastModifiedAtTimeStamp: -1 })
                        .skip((page - 1) * page_limit).limit(parseInt(page_limit)).lean();
                }
                else {
                    modalData = {
                        type: "error",
                        message: validateSearchResult.message
                    };
                }
            }

            return res.render(`${req.moduleInfo.urlPrefix}/transaction_order.html`, {
                moduleInfo: req.moduleInfo,
                data: result,
                modal: modalData,
                _paginationData: {
                    current: page,
                    rowCount: totalData,
                    pageLimit: page_limit,
                },
                supplement: await getSupplement(req, result)
            });
        })
    );
};